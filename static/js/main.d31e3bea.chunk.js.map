{"version":3,"sources":["Main/Profile.js","Main/AboutMe.js","Main/Portfolio.js","Main/Main.js","serviceWorker.js","index.js"],"names":["Profile","state","hiAnimate","nameAnimate","nickAnimate","avatarAnimate","_this2","this","setTimeout","setState","_this$state","react_default","a","createElement","className","Component","AboutMe","Portfolio","Main","fullpage","licenseKey","anchors","sectionsColor","navigation","navigationPosition","id","src_Main_Profile","Main_AboutMe","src_Main_Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","src_Main_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRA4CeA,0NAxCbC,MAAQ,CACNC,UAAW,cACXC,YAAa,SACbC,YAAa,SACbC,cAAe,6FAGG,IAAAC,EAAAC,KAClBC,WAAW,WAAQF,EAAKG,SAAS,CAAEP,UAAW,sBAAyB,KACvEM,WAAW,WAAQF,EAAKG,SAAS,CAAEP,UAAW,wBAA2B,KACzEM,WAAW,WAAQF,EAAKG,SAAS,CAAEN,YAAa,YAAe,MAC/DK,WAAW,WAAQF,EAAKG,SAAS,CAAEN,YAAa,aAAgB,KAChEK,WAAW,WAAQF,EAAKG,SAAS,CAAEL,YAAa,YAAe,KAC/DI,WAAW,WAAQF,EAAKG,SAAS,CAAEL,YAAa,aAAgB,KAChEI,WAAW,WAAQF,EAAKG,SAAS,CAAEJ,cAAe,YAAe,sCAG1D,IAAAK,EACwDH,KAAKN,MAA5DC,EADDQ,EACCR,UAAWC,EADZO,EACYP,YAAaC,EADzBM,EACyBN,YAAaC,EADtCK,EACsCL,cAC7C,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eAAiBZ,GAC/BS,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,UAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBAAmBX,GACjCQ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,iCAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBAAmBV,GACjCO,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,UAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mBAAqBT,GACnCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,6BAlCYE,cCOPC,mLANX,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,mBAHgBC,aCWPE,0LARX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAAf,oBAHkBC,cC0BTG,8LApBX,IAAIC,IAAS,YAAa,CACxBC,WAAY,4BACZC,QAAS,CAAC,OAAQ,QAAS,aAC3BC,cAAe,CAAC,UAAW,UAAW,WACtCC,YAAY,EACZC,mBAAoB,2CAKtB,OACEb,EAAAC,EAAAC,cAAA,OAAKY,GAAG,YACNd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,cAhBWb,aCKCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAAUC,SAASC,eAAe,SDqH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d31e3bea.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Profile.css'\n\nclass Profile extends Component {\n  state = {\n    hiAnimate: 'fadeInRight',\n    nameAnimate: 'hidden',\n    nickAnimate: 'hidden',\n    avatarAnimate: 'hidden'\n  }\n\n  componentDidMount() {\n    setTimeout(() => { this.setState({ hiAnimate: 'fadeOutLeft slow' }) }, 2000)\n    setTimeout(() => { this.setState({ hiAnimate: 'fadeIn slow static' }) }, 3000)\n    setTimeout(() => { this.setState({ nameAnimate: 'zoomIn' }) }, 3500)\n    setTimeout(() => { this.setState({ nameAnimate: 'zoomOut' }) }, 6000)\n    setTimeout(() => { this.setState({ nickAnimate: 'zoomIn' }) }, 7000)\n    setTimeout(() => { this.setState({ nickAnimate: 'zoomOut' }) }, 9000)\n    setTimeout(() => { this.setState({ avatarAnimate: 'fadeIn' }) }, 10000)\n  }\n\n  render() {\n    const { hiAnimate, nameAnimate, nickAnimate, avatarAnimate } = this.state\n    return (\n      <div className=\"section\">\n        <div className={\"hi animated \" + hiAnimate}>\n          <span className=\"text\">/ Hi,</span>\n        </div>\n        <div className={\"name animated \" + nameAnimate}>\n          <span className=\"text\">/ I’M SIWAPON SRIHAPONG</span>\n        </div>\n        <div className={\"nick animated \" + nickAnimate}>\n          <span className=\"text\">PIANO</span>\n        </div>\n        <div className={\"avatar animated \" + avatarAnimate}>\n          <div className=\"circle\"></div>\n          <div>/ I’M SIWAPON SRIHAPONG</div>\n          <div>PIANO</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Profile\n","import React, { Component } from 'react'\n\nclass AboutMe extends Component {\n  render() {\n    return (\n      <div className=\"section\">About Me</div>\n    )\n  }\n}\n\nexport default AboutMe\n","import React, { Component } from 'react'\nimport './Portfolio.css'\n\nclass Portfolio extends Component {\n  render() {\n    return (\n      <div className=\"section portfolio-container\">\n        Portfolio\n      </div>\n    )\n  }\n}\n\nexport default Portfolio\n","import React, { Component } from 'react'\nimport fullpage from 'fullpage.js'\nimport './Main.css'\nimport Profile from './Profile'\nimport AboutMe from './AboutMe'\nimport Portfolio from './Portfolio'\n\nclass Main extends Component {\n  componentDidMount() {\n    new fullpage('#fullpage', {\n      licenseKey: 'OPEN-SOURCE-GPLV3-LICENSE',\n      anchors: ['main', 'about', 'portfolio'],\n      sectionsColor: ['#fefff7', '#fca109', '#0d0b32'],\n      navigation: true,\n      navigationPosition: 'right',\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"fullpage\">\n        <Profile />\n        <AboutMe />\n        <Portfolio />\n      </div>\n    );\n  }\n}\n\nexport default Main\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Main from './Main/Main'\nimport * as serviceWorker from './serviceWorker'\nimport 'fullpage.js/dist/fullpage.min.css'\nimport 'animate.css/animate.min.css'\n\nReactDOM.render(<Main />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}